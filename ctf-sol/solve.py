
BYTECODE = [1, 274877906974, 244813135872, 0, 244813135872, 206158430208, 1, 90194313216, 244813135872, 1, 81604378624, 4294967295, 73014444032, 1, 68719476736, 4294327160, 81604378624, 73014444032, 244813135872, 1, 68719476736, 206158430208, 8, 94489280512, 249108103168, 283467841556, 244813135872, 240518168576, 244813135872, 287762808832, 0, 8589934598, 73014444032, 292057776130, 8589934599, 73014444032, 292057776130, 8589934600, 73014444032, 292057776130, 8589934601, 73014444032, 292057776130, 2209421562, 98784247808, 279172874242, 1095216660480, 0, 8589934602, 73014444032, 292057776130, 8589934603, 73014444032, 292057776130, 8589934604, 73014444032, 292057776130, 8589934605, 73014444032, 292057776130, 4020009855, 98784247808, 279172874242, 1095216660480, 0, 8589934606, 73014444032, 292057776130, 8589934607, 73014444032, 292057776130, 8589934608, 73014444032, 292057776130, 8589934609, 73014444032, 292057776130, 2511570847, 98784247808, 279172874242, 1095216660480, 0, 8589934610, 73014444032, 292057776130, 8589934611, 73014444032, 292057776130, 8589934612, 73014444032, 292057776130, 8589934613, 73014444032, 292057776130, 825727845, 98784247808, 279172874242, 1095216660480, 0, 8589934614, 73014444032, 292057776130, 8589934615, 73014444032, 292057776130, 8589934616, 73014444032, 292057776130, 8589934617, 73014444032, 292057776130, 2747945899, 98784247808, 279172874242, 1095216660480, 0, 8589934618, 73014444032, 292057776130, 8589934619, 73014444032, 292057776130, 8589934620, 73014444032, 292057776130, 8589934621, 73014444032, 292057776130,
            2434240953, 98784247808, 279172874242, 1095216660480, 0, 8589934622, 73014444032, 292057776130, 8589934623, 73014444032, 292057776130, 8589934624, 73014444032, 292057776130, 8589934625, 73014444032, 292057776130, 3923412385, 98784247808, 279172874242, 1095216660480, 0, 8589934626, 73014444032, 292057776130, 8589934627, 73014444032, 292057776130, 8589934628, 73014444032, 292057776130, 8589934629, 73014444032, 292057776130, 1510700589, 98784247808, 279172874242, 1095216660480, 0, 8589934630, 73014444032, 292057776130, 8589934631, 73014444032, 292057776130, 8589934632, 73014444032, 292057776130, 8589934633, 73014444032, 292057776130, 3658116609, 98784247808, 279172874242, 1095216660480, 0, 8589934634, 73014444032, 292057776130, 8589934635, 73014444032, 292057776130, 8589934636, 73014444032, 292057776130, 8589934637, 73014444032, 292057776130, 1210550661, 98784247808, 279172874242, 1095216660480, 0, 8589934638, 73014444032, 292057776130, 8589934639, 73014444032, 292057776130, 8589934640, 73014444032, 292057776130, 8589934641, 73014444032, 292057776130, 2892531646, 98784247808, 279172874242, 1095216660480, 0, 8589934642, 73014444032, 292057776130, 8589934643, 73014444032, 292057776130, 8589934644, 73014444032, 292057776130, 8589934645, 73014444032, 292057776130, 648401340, 98784247808, 279172874242, 1095216660480, 0, 8589934646, 73014444032, 292057776130, 8589934647, 73014444032, 292057776130, 8589934648, 73014444032, 292057776130, 8589934649, 73014444032, 292057776130, 2537403886, 98784247808, 279172874242, 1095216660480, 296352743424]


def sext(imm):
    if imm & (1 << 31):
        return imm - 2**32
    else:
        return imm


FLAG = bytearray(b"Q" * 58)
AVAIL_OPCS = [0, 1, 2, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x30,
              0x31, 0x32, 0x33, 0x38, 0x39, 0x3A, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46]


def execute(bytecode):
    pc = 0
    stack = []

    while True:
        if pc >= len(bytecode):
            return
        insn = bytecode[pc]
        opc = (insn >> 32) & 0xFF
        imm = insn & 0xFFFFFFFF
        if opc == 0x0:
            # unsigned
            stack.append(imm)
            pc += 1
        elif opc == 0x1:
            # signed
            stack.append(sext(imm))
            pc += 1
        elif opc == 0x2:
            stack.append(FLAG[imm])
            pc += 1
        elif opc == 0x10:
            stack.append(stack.pop() + stack.pop())
            pc += 1
        elif opc == 0x11:
            stack.append(stack.pop() ^ stack.pop())
            pc += 1
        elif opc == 0x12:
            stack.append(stack.pop() | stack.pop())
            pc += 1
        elif opc == 0x13:
            stack.append(stack.pop() & stack.pop())
            pc += 1
        elif opc == 0x14:
            stack.append(stack.pop() << stack.pop())
            pc += 1
        elif opc == 0x15:
            stack.append(stack.pop() >> stack.pop())
            pc += 1
        elif opc == 0x16:
            stack.append(stack.pop() != stack.pop())
            pc += 1
        elif opc == 0x17:
            stack.append(stack.pop() == stack.pop())
            pc += 1
        elif opc == 0x30:
            v1 = stack.pop()
            stack.append(v1)
            stack.append(v1)
            pc += 1
        elif opc == 0x31:
            v1 = stack.pop()
            v2 = stack.pop()
            stack.append(v2)
            stack.append(v1)
            stack.append(v2)
            pc += 1
        elif opc == 0x32:
            v1 = stack.pop()
            v2 = stack.pop()
            v3 = stack.pop()
            stack.append(v3)
            stack.append(v2)
            stack.append(v1)
            stack.append(v3)
            pc += 1
        elif opc == 0x33:
            v1 = stack.pop()
            v2 = stack.pop()
            v3 = stack.pop()
            v4 = stack.pop()
            stack.append(v4)
            stack.append(v3)
            stack.append(v2)
            stack.append(v1)
            stack.append(v4)
            pc += 1
        elif opc == 0x38:
            v1 = stack.pop()
            pc += 1
        elif opc == 0x39:
            v1 = stack.pop()
            v2 = stack.pop()
            stack.append(v1)
            stack.append(v2)
            pc += 1
        elif opc == 0x3A:
            v1 = stack.pop()
            v2 = stack.pop()
            v3 = stack.pop()
            stack.append(v2)
            stack.append(v3)
            stack.append(v1)
            pc += 1
        elif opc == 0x40:
            v1 = stack.pop()
            if v1 == 0:
                pc += 1
            else:
                pc = imm
        elif opc == 0x41:
            v1 = stack.pop()
            if v1 == 0:
                pc += 1
            else:
                pc += imm
        elif opc == 0x42:
            v1 = stack.pop()
            if v1 == 0:
                pc += 1
            else:
                pc -= imm
        elif opc == 0x43:
            v1 = stack.pop()
            pc = v1
        elif opc == 0x44:
            stack.append(pc + 1)
            pc = imm
        elif opc == 0x45:
            return
        elif opc == 0x46:
            pc += 1
        else:
            raise Exception("Invalid Opcode: {}".format(opc))


execute(BYTECODE)
