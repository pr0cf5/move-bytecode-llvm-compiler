runs:
  using: composite
  steps:
    - uses: ./.github/actions/rust-setup
    - name: install dependencies
      shell: bash
      run: |
        echo "${HOME}/bin/" >> $GITHUB_PATH # default INSTALL_DIR to path
        scripts/dev_setup.sh -b -i awscli # install individual tool awscli in batch mode
        sudo apt-get update -y && sudo apt-get install -y expect
    - name: Build CLI binaries in release mode
      shell: bash
      run: cargo build --release -p aptos-backup-cli --bin replay-verify --bin db-backup
    - name: query latest version in backup, at the same time, pre-heat metadata cache
      shell: bash
      run: |
        set -o nounset -o errexit -o pipefail
        target/release/db-backup one-shot query backup-storage-state \
        --metadata-cache-dir ./metadata-cache \
        command-adapter --config terraform/helm/fullnode/files/backup/$CONFIG_TEMPLATE_NAME \
        | echo LATEST_VERSION=`grep -Po '(?<=latest_transaction_version: )\d+'` \
        | tee -a $GITHUB_ENV
    - name: run replay-verify in parallel
      shell: bash
      run: |
        set -o nounset -o errexit -o pipefail
        N=32
        PER_PARTITION=$(( ($LATEST_VERSION - $HISTORY_START) / $N ))

        for n in `seq 1 $N`
        do
          END=$(( $HISTORY_START + $n * $PER_PARTITION ))
          END=$(($n == $N && $LATEST_VERSION > $END ? $LATEST_VERSION : $END))
          START=$(($END - $PER_PARTITION))
          NAME=run_${n}_${START}_$END
 
          mkdir $NAME
          cp -r metadata-cache $NAME/

          echo [main process] spawning $NAME
          unbuffer target/release/replay-verify \
          --txns-to-skip $TXNS_TO_SKIP \
          --concurrent-downloads 2 \
          --replay-concurrency-level 2 \
          --metadata-cache-dir ./$NAME/metadata-cache \
          --target-db-dir ./$NAME/db \
          --start-version $START \
          --end-version $END \
          command-adapter --config terraform/helm/fullnode/files/backup/s3-public.yaml 2>&1 \
          | sed --unbuffered -e "s/^/[partition $NAME] /" &
        done
 
        # wait for subprocesses
        for n in `seq 1 $N`
        do
          wait -n
          echo [main process] $n out of $N runs finished.
        done
        echo [main process] finished.
