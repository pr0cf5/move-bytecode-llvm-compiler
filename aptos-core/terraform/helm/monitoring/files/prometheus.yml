global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    chain_name: {{ .Values.chain.name }}
    {{- if .Values.validator.name }}
    owner: {{ .Values.validator.name }}
    {{- else if .Values.fullnode.name  }}
    owner: {{ .Values.fullnode.name }}
    {{- else }}
    owner: release:{{ .Release.Name }}
    {{- end }}

# Alertmanager configuration
alerting:
  alertmanagers:
  - static_configs:
    - targets:
      - localhost:9093

# Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
rule_files:
{{- range $path, $_ := .Files.Glob "files/rules/*.yml" }}
  - {{ base $path }}
{{- end }}

scrape_configs:
{{ if .Values.monitoring.prometheus.fullKubernetesScrape }}
- job_name: 'kubernetes-apiservers'
  scheme: https
  tls_config:
    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

  kubernetes_sd_configs:
  - role: endpoints

  # Keep only the default/kubernetes service endpoints for the https port. This
  # will add targets for each API server which Kubernetes adds an endpoint to
  # the default/kubernetes service.
  metric_relabel_configs:
  - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
    action: keep
    regex: default;kubernetes;https
  - source_labels: [__name__]
    action: drop
    regex: '(.+)_request_duration_seconds_bucket'
  - target_label: owner
    {{- if .Values.validator.name }}
    replacement: {{ .Values.validator.name }}
    {{- else if .Values.fullnode.name  }}
    replacement: {{ .Values.fullnode.name }}
    {{- else }}
    replacement: {{ .Release.Name }}
    {{- end }}
{{ end }}

- job_name: 'kubernetes-nodes'
  scheme: https
  tls_config:
    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

  kubernetes_sd_configs:
  - role: node

  {{ if not .Values.monitoring.prometheus.fullKubernetesScrape }}
  metric_relabel_configs:
  - source_labels: [namespace]
    action: keep
    regex: "{{ .Release.Namespace }}"
  # Explicitly drop spammy metrics
  - source_labels: [__name__]
    regex: 'storage_operation_duration_seconds_bucket'
    action: drop
  {{ end }}

  relabel_configs:
  - action: labelmap
    regex: __meta_kubernetes_node_label_(.+)
  - target_label: __address__
    replacement: kubernetes.default.svc:443
  - source_labels: [__meta_kubernetes_node_name]
    regex: (.+)
    target_label: __metrics_path__
    replacement: /api/v1/nodes/${1}/proxy/metrics

- job_name: 'kubernetes-cadvisor'
  scheme: https
  tls_config:
    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

  kubernetes_sd_configs:
  - role: node

  relabel_configs:
  - target_label: __address__
    replacement: kubernetes.default.svc:443
  - source_labels: [__meta_kubernetes_node_name]
    regex: (.+)
    target_label: __metrics_path__
    replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor

  {{ if not .Values.monitoring.prometheus.fullKubernetesScrape }}
  # Only keep container task state for key containers
  metric_relabel_configs:
  - source_labels: [__name__, container]
    action: drop
    regex: container_tasks_state;!validator|!fullnode
  - source_labels: [container]
    action: drop
    regex: calico.*|csi.*|ebs.*|chaos.*|aws-node|node-driver-registrar
  {{ end }}

# Scrape config for service endpoints.
#
# The relabeling allows the actual service scrape endpoint to be configured
# via the following annotations:
#
# * `prometheus.io/scrape`: Only scrape services that have a value of `true`
# * `prometheus.io/scheme`: If the metrics endpoint is secured then you will need
# to set this to `https` & most likely set the `tls_config` of the scrape config.
# * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
# * `prometheus.io/port`: If the metrics are exposed on a different port to the
# service then set this appropriately.
- job_name: 'kubernetes-service-endpoints'

  kubernetes_sd_configs:
    - role: endpoints

  relabel_configs:
    - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
      action: keep
      regex: true
    - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
      action: replace
      target_label: __scheme__
      regex: (https?)
    - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
      action: replace
      target_label: __metrics_path__
      regex: (.+)
    - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
      action: replace
      target_label: __address__
      regex: ([^:]+)(?::\d+)?;(\d+)
      replacement: $1:$2
    - action: labelmap
      regex: __meta_kubernetes_service_label_(.+)
    - source_labels: [__meta_kubernetes_namespace]
      action: replace
      target_label: kubernetes_namespace
    - source_labels: [__meta_kubernetes_service_name]
      action: replace
      target_label: kubernetes_name
    - source_labels: [__meta_kubernetes_pod_node_name]
      action: replace
      target_label: kubernetes_node

  # Drop some redundant labels from kube-state-metrics
  metric_relabel_configs:
  - action: labeldrop
    regex: uid|container_id
  # Drop tmpfs metrics from node-exporter
  - source_labels: [fstype]
    regex: tmpfs
    action: drop

  # Scrape config for pods
  #
  # The relabeling allows the actual pod scrape endpoint to be configured via the
  # following annotations:
  #
  # * `prometheus.io/scrape`: Only scrape pods that have a value of `true`
  # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
  # * `prometheus.io/port`: Scrape the pod on the indicated port instead of the default of `9102`.
- job_name: "kubernetes-pods"

  kubernetes_sd_configs:
  - role: pod

  relabel_configs:
  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
    action: keep
    regex: true
  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
    action: replace
    target_label: __metrics_path__
    regex: (.+)
  - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
    action: replace
    regex: ([^:]+)(?::\d+)?;(\d+)
    replacement: ${1}:${2}
    target_label: __address__
  - source_labels: [__meta_kubernetes_namespace]
    action: replace
    target_label: namespace
  - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_name]
    action: replace
    target_label: role
  - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_instance]
    action: replace
    target_label: instance
  - source_labels: [__meta_kubernetes_pod_name]
    action: replace
    target_label: kubernetes_pod_name
  # Explicitly drop all vector metrics
  - source_labels: [namespace]
    regex: 'vector'
    action: drop

{{ if .Values.monitoring.prometheus.remote_write.enabled }}
{{ with .Values.monitoring.prometheus.remote_write }}
remote_write:
  - url: {{ .url }}
    sigv4:
      region: {{ .region }}
    queue_config:
      max_samples_per_send: 1000
      max_shards: 200
      capacity: 2500
{{ end }}
{{ end }}

