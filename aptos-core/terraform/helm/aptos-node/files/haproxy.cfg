global
    log stdout len 10240 format raw local0

    # Config manual: https://cbonte.github.io/haproxy-dconv/2.5/configuration.html
    # magic values : terraform/helm/aptos-node/values.yaml

    # 256 connections/sec * upgrade_to(30 sec)
    maxconn 8192
    # This limits the whole HA Proxy impacting both validators and other frontends
    # maxconnrate 128
    nbthread 4

    #4MB for client facing sndbuf/rcvbuf. -- 100Mb/s with 300 mili latency (e.g., us-asia)
    tune.rcvbuf.client {{ $.Values.haproxy.limits.validator.tcpBufSize }}

    user nobody

## TCP port defaults
defaults
    log global
    mode tcp
    #option tcplog
    option dontlog-normal
    log-format "> %ci:%cp - %sp[%rt] [%t] %ft %Tw/%Tc/%Tt %B [%ts] %ac/%fc/%bc/%sc/%rc %sq/%bq"
    maxconn 8192		#Validator network mesh + FN x2
    retries 3
    timeout queue 5s  #limits num of concurrent connections. Not clear if t/o connect is needed. #https://www.papertrail.com/solution/tips/haproxy-logging-how-to-tune-timeouts-for-performance/
    timeout connect 5s
    # enough for 1 successfull + 5 unsuccessfull HB(10 sec interval) + 20 sec timeout
    timeout server 80s
    timeout client 80s

    timeout client-fin 3s #How long to hold an interrupted client connection.
    timeout server-fin 1s

frontend fe-{{ include "aptos-validator.fullname" $ }}-validator
    bind :6180
    default_backend {{ include "aptos-validator.fullname" $ }}-validator

    # Deny requests from blocked IPs
    tcp-request connection silent-drop if { src -n -f /usr/local/etc/haproxy/blocked.ips }

    acl ip_high_conn_rate sc0_conn_rate gt {{ $.Values.haproxy.limits.validator.connectionsPerIPPerMin }}

    stick-table type ip size 128K expire 30m store gpc1,conn_rate(1m),bytes_out_cnt	##about 500MB of memory
    tcp-request connection track-sc0 src 						   #update table with src ip as key, store in sc0

    #We Count rate-limit manualy -- Will be more CPU intensieve but will allow whitelists to enter and up to rateLimitSession non blacklisted IPs.
    tcp-request connection track-sc1 int(1) table CONN_RATE

    #This connection is silently dropped no reason to count it for rateLimitSession
    tcp-request connection sc-inc-gpc1(1) unless ip_high_conn_rate

    # an IP is rejected due to to many unsucsessfull tcp attempts
    #-1- Enforce connection rate limit
    tcp-request connection silent-drop if ip_high_conn_rate

    #an IP that had a sucessfull connection.
    #-2- Allow Whitelist
    tcp-request connection accept if { sc0_get_gpc1() ge 1 }

    #-3- Enforce RateLimit
    tcp-request connection reject if { sc1_gpc1_rate(CONN_RATE) gt  {{ $.Values.haproxy.limits.validator.rateLimitSession }} }

    # This is a successfull connection i.e., was sent more than 16K bytes in the last 30 min
    #tcp-request session sc-set-gpt0(0) int(...)  if { sc0_kbytes_out gt 16 }
    #<2> Mark Whitelist
    tcp-request session sc-inc-gpc1(0) if { sc0_kbytes_out gt 4 }

backend {{ include "aptos-validator.fullname" $ }}-validator
    default-server maxconn 8192
    server {{ include "aptos-validator.fullname" $ }}-{{ $.Values.i }}-validator {{ include "aptos-validator.fullname" $ }}-{{ $.Values.i }}-validator:6180

frontend fe-{{ include "aptos-validator.fullname" $ }}-validator-fn
    bind :6181
    default_backend {{ include "aptos-validator.fullname" $ }}-validator-fn

    # Deny requests from blocked IPs
    tcp-request connection silent-drop if { src -n -f /usr/local/etc/haproxy/blocked.ips }

    acl ip_high_conn_rate sc0_conn_rate gt {{ $.Values.haproxy.limits.validator.connectionsPerIPPerMin }}

    stick-table type ip size 128K expire 30m store gpc1,conn_rate(1m),bytes_out_cnt	##about 500MB of memory
    tcp-request connection track-sc0 src 						   #update table with src ip as key, store in sc0

    #We Count rate-limit manualy -- Will be more CPU intensieve but will allow whitelists to enter and up to rateLimitSession non blacklisted IPs.
    tcp-request connection track-sc1 int(1) table CONN_RATE

    #This connection is silently dropped no reason to count it for rateLimitSession
    tcp-request connection sc-inc-gpc1(1) unless ip_high_conn_rate

    # an IP is rejected due to to many unsucsessfull tcp attempts
    #-1- Enforce connection rate limit
    tcp-request connection silent-drop if ip_high_conn_rate

    #an IP that had a sucessfull connection.
    #-2- Allow Whitelist
    tcp-request connection accept if { sc0_get_gpc1() ge 1 }

    #-3- Enforce RateLimit
    tcp-request connection reject if { sc1_gpc1_rate(CONN_RATE) gt  {{ $.Values.haproxy.limits.validator.rateLimitSession }} }

    # This is a successfull connection i.e., was sent more than 16K bytes in the last 30 min
    #tcp-request session sc-set-gpt0(0) int(...)  if { sc0_kbytes_out gt 16 }
    #<2> Mark Whitelist
    tcp-request session sc-inc-gpc1(0) if { sc0_kbytes_out gt 4 }

backend {{ include "aptos-validator.fullname" $ }}-validator-fn
    default-server maxconn 16
    server {{ include "aptos-validator.fullname" $ }}-{{ $.Values.i }}-validator {{ include "aptos-validator.fullname" $ }}-{{ $.Values.i }}-validator:6181

#CONNRATE holds only entry with key 1: used for determening global conn rate
backend CONN_RATE
    stick-table type integer size 1 expire 10m store gpc1,gpc1_rate(1s)

##################  HTTP: metrics & API
defaults
	retries 3
	timeout queue 5s  #limits num of concurrent connections. Not clear if t/o connect is needed. #https://www.papertrail.com/solution/tips/haproxy-logging-how-to-tune-timeouts-for-performance/
	timeout connect 5s
	timeout server 60s #what makes sense? for silence between nodes?
	timeout client 60s

	timeout client-fin 3s #How long to hold an interrupted client connection.
	timeout server-fin 1s

	timeout http-request 60s #len of http request
	timeout http-keep-alive 2s

	rate-limit sessions 128

frontend validator-metrics
    mode http
    option httplog
    bind :9102
    default_backend validator-metrics

    # Deny requests from blocked IPs
    tcp-request connection reject if { src -n -f /usr/local/etc/haproxy/blocked.ips }
    http-request add-header Forwarded "for=%ci"

backend validator-metrics
    mode http
    default-server maxconn 16
    server {{ include "aptos-validator.fullname" $ }}-{{ $.Values.i }}-validator {{ include "aptos-validator.fullname" $ }}-{{ $.Values.i }}-validator:9101

# Exposes the validator's own REST API
{{- if $.Values.service.validator.enableRestApi }}
frontend validator-api
    mode http
    option httplog
    bind :8180
    default_backend validator-api

    # Deny requests from blocked IPs
    tcp-request connection reject if { src -n -f /usr/local/etc/haproxy/blocked.ips }
    http-request add-header Forwarded "for=%ci"

backend validator-api
    mode http
    default-server maxconn 16
    server {{ include "aptos-validator.fullname" $ }}-{{ $.Values.i }}-validator {{ include "aptos-validator.fullname" $ }}-{{ $.Values.i }}-validator:8080
{{- end }}

{{- range $index, $config := $.Values.fullnode.groups }}
{{- if lt $.Values.i (int $.Values.numFullnodeGroups) }}

frontend {{ $config.name }}-aptosnet
    bind :{{ add 6182 $index }}
    default_backend {{ $config.name }}-aptosnet

    # Deny requests from blocked IPs
    tcp-request connection reject if { src -n -f /usr/local/etc/haproxy/blocked.ips }

    acl ip_high_conn_rate sc0_conn_rate gt {{ $.Values.haproxy.limits.validator.connectionsPerIPPerMin }}

    stick-table type ip size 128K expire 30m store gpc1,conn_rate(1m),bytes_out_cnt	##about 500MB of memory
    tcp-request connection track-sc0 src 						   #update table with src ip as key, store in sc0

    #We Count rate-limit manualy -- Will be more CPU intensieve but will allow whitelists to enter and up to rateLimitSession non blacklisted IPs.
    tcp-request connection track-sc1 int(1) table CONN_RATE

    #This connection is silently dropped no reason to count it for rateLimitSession
    tcp-request connection sc-inc-gpc1(1) unless ip_high_conn_rate

    # an IP is rejected due to to many unsucsessfull tcp attempts
    #-1- Enforce connection rate limit
    tcp-request connection silent-drop if ip_high_conn_rate

    #an IP that had a sucessfull connection.
    #-2- Allow Whitelist
    tcp-request connection accept if { sc0_get_gpc1() ge 1 }

    #-3- Enforce RateLimit
    tcp-request connection reject if { sc1_gpc1_rate(CONN_RATE) gt  {{ $.Values.haproxy.limits.validator.rateLimitSession }} }

    # This is a successfull connection i.e., was sent more than 16K bytes in the last 30 min
    #tcp-request session sc-set-gpt0(0) int(...)  if { sc0_kbytes_out gt 16 }
    #<2> Mark Whitelist
    tcp-request session sc-inc-gpc1(0) if { sc0_kbytes_out gt 4 }

backend {{ $config.name }}-aptosnet
    default-server maxconn {{ $.Values.fullnode.config.max_inbound_connections }} {{ if $.Values.haproxy.config.send_proxy_protocol }}send-proxy-v2{{ end }}
    server {{ include "aptos-validator.fullname" $ }}-{{ $.Values.i }}-{{ $config.name }} {{ include "aptos-validator.fullname" $ }}-{{ $.Values.i }}-{{ $config.name }}:6182

frontend {{ $config.name }}-api
    mode http
    option httplog
    bind :{{ add 8080 $index }}
    default_backend {{ $config.name }}-api
    # add Forwarded header, which behaves differently than X-Forwarded-For
    # see https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Forwarded

    # Deny requests from blocked IPs
    tcp-request connection reject if { src -n -f /usr/local/etc/haproxy/blocked.ips }
    http-request add-header Forwarded "for=%ci"

backend {{ $config.name }}-api
    mode http
    default-server maxconn 16
    server {{ include "aptos-validator.fullname" $ }}-{{ $.Values.i }}-{{ $config.name }} {{ include "aptos-validator.fullname" $ }}-{{ $.Values.i }}-{{ $config.name }}:8080

frontend {{ $config.name }}-metrics
    mode http
    option httplog
    bind :{{ add 9103 $index }}
    default_backend {{ $config.name }}-metrics

    # Deny requests from blocked IPs
    tcp-request connection reject if { src -n -f /usr/local/etc/haproxy/blocked.ips }
    http-request add-header Forwarded "for=%ci"

backend {{ $config.name }}-metrics
    mode http
    default-server maxconn 16
    server {{ include "aptos-validator.fullname" $ }}-{{ $.Values.i }}-{{ $config.name }} {{ include "aptos-validator.fullname" $ }}-{{ $.Values.i }}-{{ $config.name }}:9101

{{- end }}
{{- end }}

frontend stats
    mode http
    bind :9101
    option http-use-htx
    http-request use-service prometheus-exporter if { path /metrics }
    stats enable
    stats uri /stats
    monitor-uri /healthy
